Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.

The words in paragraph are case-insensitive and the answer should be returned in lowercase.

 

Example 1:

Input: paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.", banned = ["hit"]
Output: "ball"
Explanation: 
"hit" occurs 3 times, but it is a banned word.
"ball" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as "ball,"), 
and that "hit" isn't the answer even though it occurs more because it is banned.

Example 2:

Input: paragraph = "a.", banned = []
Output: "a"
 

Constraints:

1 <= paragraph.length <= 1000
paragraph consists of English letters, space ' ', or one of the symbols: "!?',;.".
0 <= banned.length <= 100
1 <= banned[i].length <= 10
banned[i] consists of only lowercase English letters.

class Solution {
    public String mostCommonWord(String paragraph, String[] banned) {
        // First we create a hashset to remove the duplication words
        HashSet<String> banned_words = new HashSet<>();
        for(String word : banned){
            banned_words.add(word);
        }
        HashMap<String, Integer> valid_counts = new HashMap<String, Integer>();
        // \\W+ remove the non alphabet characters
        String para[] = paragraph.toLowerCase().split("\\W+");
        for(String word : para){
            if(!banned_words.contains(word)){
                // wordCount.getOrDefault(word, 0) retrieves the current count of the word from the HashMap. If the word is not present, it returns 0.
                // +1 increments one when it occurs
                valid_counts.put(word,valid_counts.getOrDefault(word,0) + 1);
            }
        }
        int max = 0;
        String result = "";
        // keySet() will retrieves the all keys in the map
        for(String word : valid_counts.keySet()){
            // get(word) will retrieve the value for that key(word)
            if(valid_counts.get(word) > max){
                max = valid_counts.get(word);
                result = word;
            }
        }
        return result;
    }
}
