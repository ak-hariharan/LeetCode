You are given a sorted unique integer array nums.
A range [a,b] is the set of all integers from a to b (inclusive).
Return the smallest sorted list of ranges that cover all the numbers in the array exactly. 
That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.
Each range [a,b] in the list should be output as:

"a->b" if a != b
"a" if a == b
 

Example 1:
Input: nums = [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Explanation: The ranges are:
[0,2] --> "0->2"
[4,5] --> "4->5"
[7,7] --> "7"

Example 2:
Input: nums = [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]
Explanation: The ranges are:
[0,0] --> "0"
[2,4] --> "2->4"
[6,6] --> "6"
[8,9] --> "8->9"
 

Constraints:
0 <= nums.length <= 20
-231 <= nums[i] <= 231 - 1
All the values of nums are unique.
nums is sorted in ascending order.

class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> result = new ArrayList<>();
        if (nums.length == 0)
            return result;

        int start = nums[0];

        for (int i = 1; i < nums.length; i++) {
            // Check for non-consecutive numbers
            if (nums[i] != nums[i - 1] + 1) {
                // Add the range to the result list
                if (start == nums[i - 1]) {
                    result.add(String.valueOf(start)); // Single number range
                } else {
                    result.add(start + "->" + nums[i - 1]); // Range with multiple numbers
                }
                // Update start for the next range
                start = nums[i];
            }
        }

        // Add the last range after exiting the loop
        if (start == nums[nums.length - 1]) {
            result.add(String.valueOf(start)); // Single number
        } else {
            // Check if the range is single or multiple numbers
            if (nums[nums.length - 2] + 1 == nums[nums.length - 1]) {
                result.add(start + "->" + nums[nums.length - 1]); // Valid range
            } else {
                result.add(String.valueOf(start)); // Add the last range's start
                result.add(String.valueOf(nums[nums.length - 1])); // Add the last number separately
            }
        }

        return result;
    }
}
