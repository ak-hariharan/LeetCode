Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int mid = (n + m) / 2;
        int [] result = mergedArr(nums1, nums2, mid);
        if((n + m) % 2 != 0){
            // Here we have "elements upto mid ^th index"
            // when retrieving the mid, 
            // it actually the last element of the array for odd length
            return (double) result[mid];
        }
        else{
            // when retrieving the mid, 
            // it actually the last element  and previous last element 
            // of the array for even length
            return (double)(result[mid] + result[mid - 1]) / 2;
        }
    }
    public int[] mergedArr(int n1[], int n2[], int mid){
        // we are doing merge the two arrays upto the mid because after
        // the mid point we dont need further elements
        // nums1 = [1, 3, 8]
        // nums2 = [2, 7, 10, 12]
        // mid = 4(3 + 4 = 7 => 7 / 2 = 3. so fourth element(3rd index) is the median)
        // we copy the elements from both the arrays upto the mid point
        int mergedArray[] = new int[mid + 1];
        int ptr1 = 0, ptr2 = 0, ptr3 = 0;

        if(n1.length == 0) return n2;
        if(n2.length == 0) return n1;

        while(ptr1 <n1.length && ptr2 < n2.length && ptr3 <= mid){
            if(n1[ptr1] < n2[ptr2]){
                mergedArray[ptr3++] = n1[ptr1++];
            }
            else{
                mergedArray[ptr3++] = n2[ptr2++];
            }
        }
        while(ptr2 < n2.length && ptr3 <= mid){
            mergedArray[ptr3++] = n2[ptr2++];   
        }
        while(ptr1 < n1.length && ptr3 <= mid){
            mergedArray[ptr3++] = n1[ptr1++];   
        }
        return mergedArray;
    }
}
